import java.io.IOException;
import java.util.Arrays;
import java.io.BufferedReader;
import java.io.InputStreamReader;


public class Main {
    public static final int DEFAULT_WASTED_VALUE = Integer.MAX_VALUE;

    public static void main(String[] args) throws IOException {
	BufferedReader input = new BufferedReader(new InputStreamReader(System.in));

	String[] n_numbers_str = input.readLine().split(" ");
	int n_numbers = Integer.parseInt(n_numbers_str[0]);
	int n_dreams = Integer.parseInt(n_numbers_str[1]);

	String[] numbers_str = input.readLine().split(" ");
	int[] numbers = new int[n_numbers];

	for (int i = 0; i < n_numbers; i++){
	    numbers[i] = Integer.parseInt(numbers_str[i]);

	}

	Arrays.sort(numbers);
	// System.out.println("Got all numbers");
	// System.out.println("Sorted numbers: " + Arrays.toString(numbers));
	
	int[] dreams = new int[n_dreams];

	for (int i = 0; i < n_dreams; i++){
	    dreams[i] = Integer.parseInt(input.readLine());

	}
	// System.out.println("Got all dreams");
	// System.out.println("Dreams: " + Arrays.toString(dreams));

	System.out.println(GetWastedSpace(dreams, numbers));

    }

    
    public static int GetWastedSpace(int[] dreams, int[] numbers) {
	int[] wasted = new int[dreams.length + 1];
	int last_number = numbers[numbers.length - 1];
	Arrays.fill(wasted, DEFAULT_WASTED_VALUE);
	wasted[0] = 0;
	wasted[1] = GetWaste(dreams[0], numbers);
	// System.out.println("Waste[1]: " + wasted[1]);

	// System.out.println("Init wasted");

	for (int i = 2; i <= dreams.length; i++){

	    System.out.println("Index: " + i);

	    int new_wasted = DEFAULT_WASTED_VALUE;
	    int dream_amount = 0;

	    for (int j = i - 1; j >= 0; j--) {
		dream_amount += dreams[j];

		System.out.println("Dream amount: " + dream_amount);

		if (dream_amount > last_number) {
		    break;

		}
		
		int plus_waste = GetWaste(dream_amount, numbers);
		int current = 0;
		
		if (plus_waste == DEFAULT_WASTED_VALUE) {
		    continue;

		}
		else { 
		    current = wasted[j] + plus_waste;

		    System.out.println("Waste: " + current);

		    if (current == 0) {
			new_wasted = current;
			break;

		    }
		    else {
			new_wasted = Math.min(current, new_wasted);   

		    }

		}

	    }

	    wasted[i] = new_wasted;

	    System.out.println("Final Waste: " + wasted[i]);

	}

	System.out.println("Final array: " + Arrays.toString(wasted));
	// System.out.println("Wasted[1]: " + wasted[1]);

	return wasted[dreams.length];

    }

    
    public static int GetWaste(int dream_amount, int[] numbers) {
        int i = Arrays.binarySearch(numbers, dream_amount);

	return (i < 0) ? numbers[-i - 1] - dream_amount : numbers[i] - dream_amount;

    }

}
