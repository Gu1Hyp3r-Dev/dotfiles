#+TITLE: GH's GNU Emacs Config
#+AUTHOR: Gu1Hyp3r (GH)
#+DESCRIPTION: GH's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#app-launcher][APP LAUNCHER]]
  - [[#counsel-linux-app][Counsel-Linux-App]]
  - [[#app-launcher-1][App-Launcher]]
- [[#buffer-move][BUFFER MOVE]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting The Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
  - [[#my-actual-changes][My Actual Changes]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#esheel][Esheel]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
- [[#sudo-edit][SUDO EDIT]]
- [[#theme][THEME]]
- [[#to-do][TO-DO]]
- [[#which-key][WHICH-KEY]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

#+end_src

** Load Evil Mode
#+begin_src emacs-lisp

  ;; Install a package via the elpaca macro
  ;; See the "recipes" section of the manual for more details.

  ;; (elpaca example-package)

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode)
    ;; Assume ;elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))
  ;; Blockuntil current queue processed.
  (elpaca-wait)

  ;;When installing a package used in the init file itself,
  ;;e.g. a package which adds a use-package key word,
  ;;use the :wait recipe keyword to block until that package is installed/configured.
  ;;For example:
  ;;(use-package general :ensure (:wait t) :demand t)
  ;;(use-package general :demand t)
  ;;(elpaca-wait)

  ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil
    :init ;; tweak evil's configuration before loading it
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
  (use-package evil-tutor)

  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause evaluate the declaration immediately. It is not deferred.
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
  
#+end_src

** General Keybindings
#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup)

    ;; set up 'SPC' as the global leader key
    (general-create-definer gh/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC" ;; access leader in insert mode
    )

    (gh/leader-keys
      "." '(find-file :wk "Find File")
      "TAB TAB" '(comment-line :wk "Comment lines")
    )

    (gh/leader-keys
      "b" '(:ignore t :wk "buffer")
      "b b" '(switch-to-buffer :wk "Switch buffer")
      "b i" '(ibuffer :wk "Open IBuffer")
      "b k" '(kill-this-buffer :wk "Kill this buffer")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Reload buffer")
     )

     (gh/leader-keys
       "e" '(:ignore t :wk "Eshell/Evaluate")

       ;; Evaluate Keybinds
       "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
       "e d" '(eval-defun :wk "Evaluate defun containing or after point")
       "e e" '(eval-expression :wk "Evaluate and elisp expression")
       "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
       "e r" '(eval-region :wk "Evaluate elisp in region")

        ;; Eshell Keybinds
        "e h" '(counsel-esh-history :which-key "Eshell history")
        "e s" '(eshell :which-key "Eshell")
      )
     
     (gh/leader-keys
       "f" '(:ignore f :wk "files")
       "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
       "f r" '(counsel-recentf :wk "Find recent files") 
       "f t" '(org-babel-tangle :wk "Tangle org file") 

      )


      (gh/leader-keys
        "h" '(:ignore t :wk "Help")
        "h f" '(describe-function :wk "Describe function")
        "h v" '(describe-variable :wk "Describe variable")
        "h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config")
        ;; "h r r" '(reload-init-file :wk "Reload emacs config")
      )

      (gh/leader-keys
        "t" '(:ignore t :wk "Toggle")
        "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
        "t t" '(visual-line-mode :wk "Toggle truncated lines")
        "t v" '(vterm-toggle :wk "Toggle vterm")
      )

      (gh/leader-keys
        "w" '(:ignore t :wk "Windows")

        ;; Windows splits
        "w c" '(evil-window-delete :wk "Close window")
        "w n" '(evil-window-new :wk "New window")
        "w s" '(evil-window-split :wk "Horizontal split window")
        "w v" '(evil-window-vsplit :wk "Vertical split window")

        ;; Windows motions
        "w h" '(evil-window-left :wk "Window left")
        "w j" '(evil-window-down :wk "Window down")
        "w k" '(evil-window-up :wk "Window up")
        "w l" '(evil-window-right :wk "Windows right")
        "w w" '(evil-window-next :wk "Goto next window")

        ;; Move Windows
        "w H" '(buf-move-left :wk "Buffer move left")
        "w J" '(buf-move-down :wk "Buffer move down")
        "w K" '(buf-move-up :wk "Buffer move up")
        "w L" '(buf-move-right :wk "Buffer move right")
      )

  )

#+end_src


* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs
#+begin_src emacs-lisp

  (use-package all-the-icons
    :ensure t
    :if
      (display-graphic-p)
  )
  
  (use-package all-the-icons-dired
    :hook
      (dired-mode . (lambda () (all-the-icons-dired-mode t)))
  )

#+end_src


* APP LAUNCHER

** Counsel-Linux-App
Since we have counsel installed, we can use =counsel-linux-app= to launch our Linux apps.
It list the apps by their executable command, so it's kind of tricky to use.
#+begin_src emacs-lisp

  (defun emacs-counsel-launcher ()
    "Create and select a frame called emacs-counsel-launcher which consists only of a minibuffer and has specific dimensions. Runs counsel-linux-app on that frame, which is an emacs command that prompts you to select an app and open it in a dmenu like behaviour. Delete the frame after that command has exited"
    (interactive)
    (with-selected-frame
      (make-frame '((name . "emacs-run-launcher")
                    (minibuffer . only)
                    (fullscreen . 0) ; no fullscreen
                    (undecorated . t) ; remove title bar
                    ;; (auto-raise . t) ; focus on this frame
                    ;; (tool-bar-lines . 0)
                    ;; (menu-bar-lines . 0)
                    (internal-border-width . 10)
                    (width . 80)
                    (height . 11)
                   )
                  (unwind-protect
                    (counsel-linux-app)
                    (delete-frame)
                  )
      )
    )
  )

#+end_src

** App-Launcher
#+begin_src emacs-lisp

  (use-package app-launcher
    :ensure '(app-launcher :host github :repo "SebastienWae/app-launcher")
  )
  
  ;; create a global keyboard shortcut with the following code
  ;; emacsclient -cF "((visibility . nil))" -e "(emacs-run-launcher)"

  (defun emacs-run-launcher ()
    "Create and select a frame called emacs-counsel-launcher which consists only of a minibuffer and has specific dimensions. Runs counsel-linux-app on that frame, which is an emacs command that prompts you to select an app and open it in a dmenu like behaviour. Delete the frame after that command has exited"
    (interactive)
    (with-selected-frame
      (make-frame '((name . "emacs-run-launcher")
                    (minibuffer . only)
                    (fullscreen . 0) ; no fullscreen
                    (undecorated . t) ; remove title bar
                    ;; (auto-raise . t) ; focus on this frame
                    ;; (tool-bar-lines . 0)
                    ;; (menu-bar-lines . 0)
                    (internal-border-width . 10)
                    (width . 80)
                    (height . 11)
                   )
                  (unwind-protect
                    (app-launcher-run-app)
                    (delete-frame)
                  )
      )
    )
  )

#+end_src


* BUFFER MOVE
Creating some functions to allow us to easily move windows (splits) around. The following block of code was taken from buffer-move.el found on EmacsWiki:
https://www.emacswiki.org/emacs/buffer-move.el
#+begin_src emacs-lisp

  (require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win)))) 

#+end_src


* FONTS
Defining the various fonts that emacs will use.

** Setting The Font Face
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "CaskaydiaCove Nerd Font Mono"
    :height 100
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "CaskaydiaCove Nerd Font"
    :height 100
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "CaskaydiaCove Nerd Font Mono"
    :height 100
    :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting E...
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fo...
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "CaskaydiaCove Nerd Font Mono"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)

#+end_src

** Zooming In/Out
You can use the bindings CTRL plus +/- for zooming in/out. You can also use CTRL plus the mouse whell for zooming in/out.
#+begin_src emacs-lisp

  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

  
#+end_src


* GRAPHICAL USER INTERFACE TWEAKS
Let's make GNU emacs look a little better.

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp

  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)

#+end_src


* IVY (COUNSEL)
+ Ivy, is a generic completion mechanism for emacs.
+ Counsel, is a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x. 
#+begin_src emacs-lisp

  (use-package counsel
    :after ivy
    :config (counsel-mode)
  )

  (use-package ivy
    :bind
  ;; ivy-resume resumes the last Ivy-based completion.
      (("C-c C-r" . ivy-resume)
       ("C-x B" . ivy-switch-buffer-other-window)  
      )
    :custom
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d)")
      (setq enable-recursive-minibuffers t)
    :config
      (ivy-mode)
  )
  
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init
      (all-the-icons-ivy-rich-mode t)
  )

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init
      (ivy-rich-mode 1) ;; this gets us description in M-x.
    :custom
      (ivy-virtual-abreviate 'full
       ivy-rich-switch-buffer-align-virtual-buffer t
       ivy-rich-path-style 'abbrev
      )
    :config
      (ivy-set-display-transformer
        'ivy-switch-buffer
        'ivy-rich-switch-buffer-transformer
      )
  )

#+end_src


* ORG MODE

** Enabling Table of Contents
#+begin_src emacs-lisp

  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable)
  )

#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.
#+begin_src emacs-lisp

  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+end_src

** Disable Electric Indent
Org mode source blocks have some really weird and annoying default indentation behavior. I think this has to do with electric-indent-mode, which is turned on by default in Emacs. So let's turned it off.
#+begin_src emacs-lisp

  (electric-indent-mode -1)

#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled. Org-tempo allows for '<s' followed by TAB to a begin_src tag. Other expansions available include:

+------------------------+-------------------------------------------+
| Typing the below + TAB | Expands to ...                            |
|------------------------+-------------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' ... '#+END_EXPORT' |
| <c                     | '#+BEGIN_CENTER' ... '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' ... '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' ... '#+END_COMMENT'     |
| <E                     | '#+BEGIN_EXPORT' ... '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' ... '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' ... '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' ... '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' ... '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' ... '#+END_VERSE'         |
+------------------------+-------------------------------------------+

#+begin_src emacs-lisp

  (require 'org-tempo)

#+end_src

** My Actual Changes
Here I change some stuff (unorganized)
#+begin_src emacs-lisp

  ;; (setq org-support-shift-select 'always)

#+end_src


* RAINBOW MODE
DIsplay the actual color as a background for any hex color value (ex. #ffffff). The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.
#+begin_src emacs-lisp

  (use-package rainbow-mode
    :ensure t
    :hook org-mode prog-mode
  )

#+end_src


* SHELLS AND TERMINALS
In my configs, all of my shells (bash, fish, zsh and the ESHEEL) require my shell-color-scripts-git package to be installed. On Arch Linux, you can install it from the AUR. Otherwise, go to my shell-color-scripts repository on GitLab to get it.

** Esheel
Eshell is an emacs 'shell' that is written in Elisp.
#+begin_src emacs-lisp

  (use-package eshell-syntax-highlighting
    :after esh-mod
    :config
      (esheel-syntax-highlighting-global-mode +1)
  )

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-srcipt -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file-- sets an aliases file for the eshell.

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop"  "ssh" "top" "zsh")
  )

#+end_src

** Vterm
Vterm is a terminal emulator within Emacs. The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm. By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.
#+begin_src emacs-lisp

  (use-package vterm
    :config
      (setq shell-file-name "bin/kitty"
            vterm-max-scrollback 5000
      )
  )

#+end_src

** Vterm-Toggle
vterm-toggle toggles between the vterm buffer and whatever buffer you are editing.
#+begin_src emacs-lisp

  (use-package vterm-toggle
    :after vterm
    :config
      (setq vterm-toogle-fullscreen-p nil)
      (setq vterm-toggle-scope 'project)
      (add-to-list 'display-buffer-alist
                   '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   ;; (display-buffer-reuse-window display-buffer-in-direction)
                   ;; display-buffer-in-direction/direction/dedicated is added in emacs27
                   ;; (direction . bottom)
                   ;; (dedicated . t) ;dedicated is supported in emacs27
                   (reusable-frames . visible)
                   (window-height . 0.3)
                   )
      )
  )

#+end_src


* SUDO EDIT
sudo-edit gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.
#+begin_src emacs-lisp

  (use-package sudo-edit
    :config
      (gh/leader-keys
        "f u" '(sudo-edit-find-file :wk "Sudo find file")
        "f U" '(sudo-edit :wk "Sudo edit file")
      )
  )

#+end_src


* THEME
The first of the two lines below designates the directory where will place all of our themes. The second line loads our chosen theme which is *ghemacs*, a theme that I created with the help of:
https://mswift42.github.io/themecreator/
#+begin_src emacs-lisp

  (add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
  ;; (load-theme 'ghemacs-t1 t)
  (load-theme 'dtmacs t)

#+end_src


* TO-DO

#+begin_src emacs-lisp

  ;; consult

#+end_src

 
* WHICH-KEY
#+begin_src emacs-lisp

  (use-package which-key
    :init
      (which-key-mode 1)
    :config
      (setq which-key-side-window-location 'bottom
	    which-key-sort-order #'which-key-key-order-alpha
	    which-key-sort-uppercase-first nil
	    which-key-add-collumn-padding 1
	    which-key-max-display-collumns nil
	    which-key-min-display-lines 5
	    which-key-side-window-slot -10
	    which-key-side-window-max-height 0.4
	    which-key-idle-delay 0.8
	    which-key-max-description-lenght 25
	    which-key-allow-imprecise-window-fit t
          which-key-separator " -> "
      ) 
  )

#+end_src
